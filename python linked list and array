class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Create nodes
node1 = Node(3)
node2 = Node(5)
node3 = Node(13)
node4 = Node(2)

# Link nodes
node1.next = node2
node2.next = node3
node3.next = node4

# Traverse and print the list
currentNode = node1
while currentNode:
    print(currentNode.data, end=" -> ")
    currentNode = currentNode.next
print("null")

# Output: 3 -> 5 -> 13 -> 2 -> null
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtBeginning(self, new_data):
        new_node = Node(new_data) # Create a new node
        new_node.next = self.head  # Next for new node becomes the current head
        self.head = new_node      # Head now points to the new node

    def printList(self):
        temp = self.head
        while temp:
            print(temp.data, end=' ')
            temp = temp.next
        print()

if __name__ == '__main__':
    llist = LinkedList()
    llist.insertAtBeginning('fox')
    llist.insertAtBeginning('brown')
    llist.insertAtBeginning('quick')
    llist.insertAtBeginning('the')
    llist.printList()

# Output: the quick brown fox
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def traverseAndPrint(head):
    currentNode = head
    while currentNode:
        print(currentNode.data, end=" -> ")
        currentNode = currentNode.next
    print("null")

def insertNodeAtPosition(head, newNode, position):
    if position == 1: # Insert at beginning
        newNode.next = head
        return newNode
    
    currentNode = head
    for _ in range(position - 2): # Traverse to the node before the insertion point
        if currentNode is None:
            break
        currentNode = currentNode.next
    
    if currentNode is None: # Position out of bounds
        print("Position out of bounds.")
        return head
        
    newNode.next = currentNode.next # New node points to what current node was pointing to
    currentNode.next = newNode      # Current node points to new node
    return head

# Example Usage:
node1 = Node(7)
node2 = Node(3)
node3 = Node(2)
node4 = Node(9)

node1.next = node2
node2.next = node3
node3.next = node4

print("Original list:")
traverseAndPrint(node1) # Output: Original list: 7 -> 3 -> 2 -> 9 -> null

newNode = Node(97)
node1 = insertNodeAtPosition(node1, newNode, 2)

print("\nAfter insertion:")
traverseAndPrint(node1) # Output: After insertion: 7 -> 97 -> 3 -> 2 -> 9 -> null

# Answer: The new node (97) is inserted at position 2, after the node with data 7.
