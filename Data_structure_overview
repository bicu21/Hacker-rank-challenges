phonebook = {"Alice": "555-1234", "Bob": "555-5678"}
print(phonebook["Alice"])  # Output: 555-1234
point = (10, 4)
color = ('red', 255, 0, 0)
fruits = {"apple", "banana", "cherry"}
fruits.add("banana")  # No change, since "banana" is already present
stack = []
stack.append("a")   # Push onto stack
stack.append("b")
stack.pop()         # Removes and returns "b"
from collections import deque
queue = deque()
queue.append("a")     # Enqueue
queue.append("b")
queue.popleft()       # Dequeue: returns "a"
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Create the tree manually
root = Node(10)
root.left = Node(5)
root.right = Node(15)

root.left.left = Node(3)
root.left.right = Node(7)
def inorder_traversal(node):
    if node:
        inorder_traversal(node.left)
        print(node.data, end=" ")
        inorder_traversal(node.right)

inorder_traversal(root)  # Output: 3 5 7 10 15
from collections import deque

# Create a queue
queue = deque()

# Enqueue (Add elements)
queue.append('a')
queue.append('b')
queue.append('c')

print("Queue after enqueuing:", queue)

# Dequeue (Remove elements)
item = queue.popleft()
print("Dequeued item:", item)

print("Queue after dequeuing:", queue)
Queue after enqueuing: deque(['a', 'b', 'c'])
Dequeued item: a
Queue after dequeuing: deque(['b', 'c'])
# Create an empty stack
stack = []

# Push elements (add)
stack.append('x')
stack.append('y')
stack.append('z')

print("Stack after pushes:", stack)

# Pop elements (remove)
item = stack.pop()
print("Popped item:", item)

print("Stack after popping:", stack)
Stack after pushes: ['x', 'y', 'z']
Popped item: z
Stack after popping: ['x', 'y']

