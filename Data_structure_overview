phonebook = {"Alice": "555-1234", "Bob": "555-5678"}
print(phonebook["Alice"])  # Output: 555-1234
point = (10, 4)
color = ('red', 255, 0, 0)
fruits = {"apple", "banana", "cherry"}
fruits.add("banana")  # No change, since "banana" is already present
stack = []
stack.append("a")   # Push onto stack
stack.append("b")
stack.pop()         # Removes and returns "b"
from collections import deque
queue = deque()
queue.append("a")     # Enqueue
queue.append("b")
queue.popleft()       # Dequeue: returns "a"
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Create the tree manually
root = Node(10)
root.left = Node(5)
root.right = Node(15)

root.left.left = Node(3)
root.left.right = Node(7)
def inorder_traversal(node):
    if node:
        inorder_traversal(node.left)
        print(node.data, end=" ")
        inorder_traversal(node.right)

inorder_traversal(root)  # Output: 3 5 7 10 15
from collections import deque

# Create a queue
queue = deque()

# Enqueue (Add elements)
queue.append('a')
queue.append('b')
queue.append('c')

print("Queue after enqueuing:", queue)

# Dequeue (Remove elements)
item = queue.popleft()
print("Dequeued item:", item)

print("Queue after dequeuing:", queue)
Queue after enqueuing: deque(['a', 'b', 'c'])
Dequeued item: a
Queue after dequeuing: deque(['b', 'c'])
# Create an empty stack
stack = []

# Push elements (add)
stack.append('x')
stack.append('y')
stack.append('z')

print("Stack after pushes:", stack)

# Pop elements (remove)
item = stack.pop()
print("Popped item:", item)

print("Stack after popping:", stack)
Stack after pushes: ['x', 'y', 'z']
Popped item: z
Stack after popping: ['x', 'y']
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1


class AVLTree:

    # Function to insert a node
    def insert(self, root, key):
        # Step 1 - Perform normal BST insertion
        if not root:
            return Node(key)
        elif key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)

        # Step 2 - Update the height of the ancestor node
        root.height = 1 + max(self.getHeight(root.left),
                              self.getHeight(root.right))

        # Step 3 - Get the balance factor
        balance = self.getBalance(root)

        # Step 4 - Balance the tree

        # Case 1 - Left Left
        if balance > 1 and key < root.left.key:
            return self.rightRotate(root)

        # Case 2 - Right Right
        if balance < -1 and key > root.right.key:
            return self.leftRotate(root)

        # Case 3 - Left Right
        if balance > 1 and key > root.left.key:
            root.left = self.leftRotate(root.left)
            return self.rightRotate(root)

        # Case 4 - Right Left
        if balance < -1 and key < root.right.key:
            root.right = self.rightRotate(root.right)
            return self.leftRotate(root)

        return root

    # Recursive function to delete a node
    def delete(self, root, key):
        if not root:
            return root

        elif key < root.key:
            root.left = self.delete(root.left, key)

        elif key > root.key:
            root.right = self.delete(root.right, key)

        else:
            # node with only one child or no child
            if not root.left:
                return root.right
            elif not root.right:
                return root.left

            # node with two children: get the inorder successor
            temp = self.getMinValueNode(root.right)
            root.key = temp.key
            root.right = self.delete(root.right, temp.key)

        # If the tree has only one node
        if not root:
            return root

        # Update the height
        root.height = 1 + max(self.getHeight(root.left),
                              self.getHeight(root.right))

        # Check balance
        balance = self.getBalance(root)

        # Balance the tree
        # Left Left
        if balance > 1 and self.getBalance(root.left) >= 0:
            return self.rightRotate(root)

        # Left Right
        if balance > 1 and self.getBalance(root.left) < 0:
            root.left = self.leftRotate(root.left)
            return self.rightRotate(root)

        # Right Right
        if balance < -1 and self.getBalance(root.right) <= 0:
            return self.leftRotate(root)

        # Right Left
        if balance < -1 and self.getBalance(root.right) > 0:
            root.right = self.rightRotate(root.right)
            return self.leftRotate(root)

        return root

    def leftRotate(self, z):
        y = z.right
        T2 = y.left

        # Perform rotation
        y.left = z
        z.right = T2

        # Update heights
        z.height = 1 + max(self.getHeight(z.left),
                           self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),
                           self.getHeight(y.right))

        # Return new root
        return y

    def rightRotate(self, z):
        y = z.left
        T3 = y.right

        # Perform rotation
        y.right = z
        z.left = T3

        # Update heights
        z.height = 1 + max(self.getHeight(z.left),
                           self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),
                           self.getHeight(y.right))

        # Return new root
        return y

    def getHeight(self, node):
        if not node:
            return 0
        return node.height

    def getBalance(self, node):
        if not node:
            return 0
        return self.getHeight(node.left) - self.getHeight(node.right)

    def getMinValueNode(self, node):
        if node is None or node.left is None:
            return node
        return self.getMinValueNode(node.left)

    def preOrder(self, root):
        if not root:
            return
        print("{0} ".format(root.key), end="")
        self.preOrder(root.left)
        self.preOrder(root.right)

    def inOrder(self, root):
        if not root:
            return
        self.inOrder(root.left)
        print("{0} ".format(root.key), end="")
        self.inOrder(root.right)


# Driver code
if __name__ == "__main__":
    tree = AVLTree()
    root = None

    nums = [10, 20, 30, 40, 50, 25]

    for num in nums:
        root = tree.insert(root, num)

    print("Preorder traversal after insertion:")
    tree.preOrder(root)
    print("\nInorder traversal after insertion:")
    tree.inOrder(root)

    key_to_delete = 40
    print(f"\n\nDeleting node {key_to_delete}")
    root = tree.delete(root, key_to_delete)

    print("Preorder traversal after deletion:")
    tree.preOrder(root)
    print("\nInorder traversal after deletion:")
    tree.inOrder(root)
import random

# Initialize an empty list
data = []

# Insert random numbers into the list
for _ in range(10):
    num = random.randint(1, 100)
    data.append(num)
print("List after insertions:", data)

# Randomly access elements
for _ in range(3):
    index = random.randint(0, len(data) - 1)
    print(f"Random access at index {index}: {data[index]}")

# Randomly remove elements
for _ in range(3):
    if data:  # Check if list is not empty
        index = random.randint(0, len(data) - 1)
        removed = data.pop(index)
        print(f"Removed element {removed} at index {index}")

print("Final list:", data)
class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        return None

    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        return None

    def is_empty(self):
        return len(self.items) == 0

from collections import deque

class Queue:
    def __init__(self):
        self.items = deque()

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.popleft()
        return None

    def is_empty(self):
        return len(self.items) == 0
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        if not self.head:
            self.head = Node(data)
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = Node(data)


